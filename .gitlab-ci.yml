# in GITLAB register variables:
# NAMESPACE_TEST         - project in openshift (testing stage)
# NAMESPACE_PROD         - project in openshift (production stage)
# REGISTRY_URL           - docker registry address
# REGISTRY_LOGIN         - docker registry login
# REGISTRY_PASSWORD      - docker regisry password
# OPENSHIFT_URL_TEST     - openshift API url (testing stage)
# OPENSHIFT_URL_PROD     - openshift API url (production stage)
# OPENSHIFT_TOKEN_TEST   - openshift serviceaccount token (testing stage)
# OPENSHIFT_TOKEN_PROD   - openshift serviceaccount token (production stage)
# CONFIG_TEST            - config file name in ci/  (testing stage)
# CONFIG_PROD            - config file name in ci/  (production stage)
# BASE_IMAGE             - docker image for replacement in Dockerfile while deploy (per repository)

image: docker:stable
services:
  - name: docker:dind
    command:
      - "--insecure-registry=registry.x5.phoenixit.ru"  # For developer stage

variables:
  SPRING_PROFILES_ACTIVE: gitlab-ci
  REGISTRY_PATH: "doc-sign"
  DOCKER_DRIVER: overlay2
#  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  IMAGE: "${REGISTRY_URL}/${REGISTRY_PATH}/${CI_PROJECT_NAME}"
  CONFIG_NAME: ${CI_PROJECT_NAME}-config
  SECRET_NAME: ${CI_PROJECT_NAME}-secret

stages:
  - build
  - containerize
  - deploy

before_script:
  - export GRADLE_USER_HOME=/home/gradle/project

build_master:
  image: gradle:jdk11
  stage: build
  script:
     - gradle clean build
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 day
  only:
    - master

build_x5_test:
  image: gradle:jdk11
  stage: build
  script:
     - gradle clean build
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 day
  only:
    - dev
    
build_x5_prod:
  image: gradle:jdk11
  stage: build
  script:
     - gradle clean build
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 day
  only:
    - release    

package_master:
  stage: containerize
  before_script:
    - docker login -u ${REGISTRY_LOGIN} -p ${REGISTRY_PASSWORD} ${REGISTRY_URL}
  script:
    - echo "FROM ${BASE_IMAGE}" >  Dockerfile_tmp
    - grep -v "FROM" Dockerfile >> Dockerfile_tmp
    - cp Dockerfile_tmp Dockerfile
    - docker build --pull -t ${IMAGE}:${CI_COMMIT_SHA:0:8} .
    - docker tag ${IMAGE}:${CI_COMMIT_SHA:0:8} ${IMAGE}:latest
    - docker push ${IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker push ${IMAGE}:latest
    - docker rmi ${IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker rmi ${IMAGE}:latest
  when: manual
  only:
    - master

package_x5_test:
  stage: containerize
  before_script:
    - docker login -u ${REGISTRY_LOGIN} -p ${REGISTRY_PASSWORD} ${REGISTRY_URL}
  script:
    - echo "FROM ${BASE_IMAGE}" >  Dockerfile_tmp
    - grep -v "FROM" Dockerfile >> Dockerfile_tmp
    - cp Dockerfile_tmp Dockerfile
    - docker build --pull -t ${IMAGE}:${CI_COMMIT_SHA:0:8} .
    - docker tag ${IMAGE}:${CI_COMMIT_SHA:0:8} ${IMAGE}:latest
    - docker push ${IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker push ${IMAGE}:latest
    - docker rmi ${IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker rmi ${IMAGE}:latest
  when: manual
  only:
    - dev

package_x5_prod:
  stage: containerize
  before_script:
    - docker login -u ${REGISTRY_LOGIN} -p ${REGISTRY_PASSWORD} ${REGISTRY_URL}
  script:
    - echo "FROM ${BASE_IMAGE}" >  Dockerfile_tmp
    - grep -v "FROM" Dockerfile >> Dockerfile_tmp
    - cp Dockerfile_tmp Dockerfile
    - docker build --pull -t ${IMAGE}:${CI_COMMIT_SHA:0:8} .
    - docker tag ${IMAGE}:${CI_COMMIT_SHA:0:8} ${IMAGE}:latest
    - docker push ${IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker push ${IMAGE}:latest
    - docker rmi ${IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker rmi ${IMAGE}:latest
  when: manual
  only:
    - release

deploy_master:
  stage: deploy
  variables:
    NAMESPACE: ${NAMESPACE_TEST}
    OPENSHIFT_URL: ${OPENSHIFT_URL_TEST}
    OPENSHIFT_TOKEN: ${OPENSHIFT_TOKEN_TEST}
    CONFIGMAP: ${CONFIG_TEST}
  image: openshift/origin-cli
  script:
    - oc login ${OPENSHIFT_URL} --token=${OPENSHIFT_TOKEN} --insecure-skip-tls-verify
    - oc project ${NAMESPACE}
    - oc delete configmap ${CONFIG_NAME} --ignore-not-found -n ${NAMESPACE}
    - oc apply -f ci/${CONFIGMAP} -n ${NAMESPACE}
    - oc process -f ci/service.yml NAME=${CI_PROJECT_NAME} IMAGE="${REGISTRY_URL}/${REGISTRY_PATH}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA:0:8}" NAMESPACE=${NAMESPACE} CONFIG_NAME=${CONFIG_NAME} SECRET_NAME=${SECRET_NAME}| oc apply -n ${NAMESPACE} -f -
  when: manual
  only:
    - master

deploy_x5_test:
  stage: deploy
  variables:
    NAMESPACE: ${NAMESPACE_TEST}
    OPENSHIFT_URL: ${OPENSHIFT_URL_TEST}
    OPENSHIFT_TOKEN: ${OPENSHIFT_TOKEN_TEST}
    CONFIGMAP: ${CONFIG_TEST}
  image: openshift/origin-cli
  script:
    - oc login ${OPENSHIFT_URL} --token=${OPENSHIFT_TOKEN} --insecure-skip-tls-verify
    - oc project ${NAMESPACE}
    - oc delete configmap ${CONFIG_NAME} --ignore-not-found -n ${NAMESPACE}
    - oc apply -f ci/${CONFIGMAP} -n ${NAMESPACE}
    - oc process -f ci/service.yml NAME=${CI_PROJECT_NAME} IMAGE="${REGISTRY_URL}/${REGISTRY_PATH}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA:0:8}" NAMESPACE=${NAMESPACE} CONFIG_NAME=${CONFIG_NAME} SECRET_NAME=${SECRET_NAME}| oc apply -n ${NAMESPACE} -f -
  when: manual
  only:
    - dev

deploy_x5_prod:
  stage: deploy
  variables:
    NAMESPACE: ${NAMESPACE_PROD}
    OPENSHIFT_URL: ${OPENSHIFT_URL_PROD}
    OPENSHIFT_TOKEN: ${OPENSHIFT_TOKEN_PROD}
    CONFIGMAP: ${CONFIG_PROD}
  image: openshift/origin-cli
  script:
    - oc login ${OPENSHIFT_URL} --token=${OPENSHIFT_TOKEN} --insecure-skip-tls-verify
    - oc project ${NAMESPACE}
    - oc delete configmap ${CONFIG_NAME} --ignore-not-found -n ${NAMESPACE}
    - oc apply -f ci/${CONFIGMAP} -n ${NAMESPACE}
    - oc process -f ci/service.yml NAME=${CI_PROJECT_NAME} IMAGE="${REGISTRY_URL}/${REGISTRY_PATH}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA:0:8}" NAMESPACE=${NAMESPACE} CONFIG_NAME=${CONFIG_NAME} SECRET_NAME=${SECRET_NAME}| oc apply -n ${NAMESPACE} -f -
  when: manual
  only:
    - release